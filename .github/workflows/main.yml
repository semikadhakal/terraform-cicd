name: sujansapkota - Terraform CI Workflow
on:
  pull_request:
    branches: [main]
    types:
      - opened
      - synchronize
permissions:
  contents: read
  pull-requests: read
env:
  TF_VERSION: "1.12.2"
  TFLINT_VERSION: "v0.47.0"
  TFSEC_VERSION: "v1.28.0"
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ec2: ${{ steps.filter.outputs.ec2 }}
      s3: ${{ steps.filter.outputs.s3 }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect project changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ec2:
              - 'ec2-project/**'
            s3:
              - 's3-project/**'
  lint-validate-plan-ec2:
    name: EC2 - Validate & Plan
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.ec2 == 'true' &&
      github.event_name == 'pull_request' &&
      (github.event.action == 'synchronize' || github.event.action == 'opened')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} -------
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} -------
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}
      - name: Terraform Init
        run: terraform init
        working-directory: ec2-project
      - name: Run TFLint
        run: tflint --format compact
        working-directory: ec2-project
      - name: Terraform Format Check
        run: terraform fmt -check -diff
        working-directory: ec2-project
      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: ec2-project
      - name: Terraform Plan
        run: terraform plan -out=tfplan -no-color
        working-directory: ec2-project
      - name: Save Terraform Plan Output
        run: terraform show -no-color tfplan > tfplan.txt
        working-directory: ec2-project
      - name: Upload tfplan.txt as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ec2-project-tfplan
          path: ec2-project/tfplan.txt
      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request' && github.base_ref == 'dev'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }} -------
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('ec2-project/tfplan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`ec2-project\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
              });
  lint-validate-plan-s3:
    name: S3 - Validate & Plan
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.s3 == 'true' &&
      github.event_name == 'pull_request' &&
      (github.event.action == 'synchronize' || github.event.action == 'opened')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} -------
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} -------
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}
      - name: Terraform Init
        run: terraform init
        working-directory: s3-project
      - name: Run TFLint
        run: tflint --format compact
        working-directory: s3-project
      - name: Terraform Format Check
        run: terraform fmt -check -diff
        working-directory: s3-project
      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: s3-project
      - name: Terraform Plan
        run: terraform plan -out=tfplan -no-color
        working-directory: s3-project
      - name: Save Terraform Plan Output
        run: terraform show -no-color tfplan > tfplan.txt
        working-directory: s3-project
      - name: Upload tfplan.txt as artifact
        uses: actions/upload-artifact@v4
        with:
          name: s3-project-tfplan
          path: s3-project/tfplan.txt
      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request' && github.base_ref == 'dev'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }} -------
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('s3-project/tfplan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`s3-project\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
              });
  dev-apply-artifact-ec2:
    name: EC2 - Generate Dev Artifact
    runs-on: ubuntu-latest
    needs:
      - lint-validate-plan-ec2
      - detect-changes
    if: |
      needs.detect-changes.outputs.ec2 == 'true' &&
      github.event_name == 'pull_request' &&
      (github.event.action == 'synchronize' || github.event.action == 'opened')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get commit hash
        id: commit
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Package Terraform Project
        run: |
          cd ec2-project
          tar czf ../ec2-project-${{ steps.commit.outputs.hash }}.tar.gz .
        shell: bash
      - name: Upload Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ec2-project-${{ steps.commit.outputs.hash }}
          path: ec2-project-${{ steps.commit.outputs.hash }}.tar.gz
  dev-apply-artifact-s3:
    name: S3 - Generate Dev Artifact
    runs-on: ubuntu-latest
    needs:
      - lint-validate-plan-s3
      - detect-changes
    if: |
      needs.detect-changes.outputs.s3 == 'true' &&
      github.event_name == 'pull_request' &&
      (github.event.action == 'synchronize' || github.event.action == 'opened')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get commit hash
        id: commit
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Package Terraform Project
        run: |
          cd s3-project
          tar czf ../s3-project-${{ steps.commit.outputs.hash }}.tar.gz .
        shell: bash
      - name: Upload Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: s3-project-${{ steps.commit.outputs.hash }}
          path: s3-project-${{ steps.commit.outputs.hash }}.tar.gz






